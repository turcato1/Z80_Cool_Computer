0000                             ; Z80 computer in breadboard Z80 COOL
0000                             ; v00 of program test
0000                             ; 
0000                             ; 
0000                             ; Beggining of Monitor program
0000                          .ORG   0000h   
0000                             ; 
0000                             ; ********************** Main Program ********************** 
0000                             ; 
0000                             ; Program setup & initialization
0000   31 00 20               LD   sp,2000h   ;Set stack pointer to the end of the ram        
0003                             ; 
0003                             ; 
0003                             ; Welcome & alive message
0000                          .ORG   0000h   
0000   3E 5A                  LD   A,"Z"   
0002   D3 03                  OUT   (03H),A   
0004   3E 38                  LD   A,"8"   
0006   D3 02                  OUT   (02H),A   
0008   3E 30                  LD   A,"0"   
000A   D3 01                  OUT   (01H),A   
000C   3E 20                  LD   A," "   
000E   D3 00                  OUT   (00H),A   
0010                             ; 
0010   3E 43                  LD   A,"C"   
0012   D3 07                  OUT   (07H),A   
0014   3E 4F                  LD   A,"O"   
0016   D3 06                  OUT   (06H),A   
0018   3E 4F                  LD   A,"O"   
001A   D3 05                  OUT   (05H),A   
001C   3E 4C                  LD   A,"L"   
001E   D3 04                  OUT   (04H),A   
0020                             ; 
0020                             ; Test RAM memory (ADDR 1000H AND 1FFF)
0020   21 00 10               LD   HL,1000H   ;Set the memory pointer to first RAM address
0023   01 00 10               LD   BC,1000H   ;Set the byte counter to memory size value
0026                MEMTEST1:      ;Test sequence writing 55H in all memory positions
0026   3E 55                  LD   A,55H   
0028   77                     LD   (HL),A   ;Write 55H in (HL) memory position
0029   ED A1                  CPI      ;Increment HL, Decrement BC and if A=(HL) -> Z = 1
002B   20 1F                  JR   NZ,RAM_BAD   ;If Z = 0, then A!=(HL), so memory fail
002D   F2 38 00               JP   P,MEMTEST2   ;If BC-1=0 -> P = 1 -> memory end, else test next mem pos
0030   18 F4                  JR   MEMTEST1   ;Go to test next mem position
0032   21 00 10               LD   HL,1000H   ;Set the memory pointer to first RAM address
0035   01 00 10               LD   BC,1000H   ;Set the byte counter to memory size value
0038                MEMTEST2:      ;Test sequence writing 00H in all memory positions
0038   3E 00                  LD   A,00H   
003A   77                     LD   (HL),A   ;Write 00H in (HL) memory position
003B   ED A1                  CPI      ;Increment HL, Decrement BC and if A=(HL) -> Z = 1
003D   20 0D                  JR   NZ,RAM_BAD   ;If Z = 0, then A!=(HL), so memory fail
003F   F2 44 00               JP   P,RAM_OK   ;If BC-1=0 -> P = 1 -> memory end, else test next mem pos
0042   18 F4                  JR   MEMTEST2   ;Go to test next mem position
0044                RAM_OK:      ;Print message "RAM OK"
0044   21 E7 00               LD   HL,MSG_RAMOK   
0047   CD 53 00               CALL   MSGTEST   
004A   18 06                  JR   TEST_END   
004C                RAM_BAD:      ;Print message "RAM BAD"
004C   21 F0 00               LD   HL,MSG_RAMBAD   
004F   CD 53 00               CALL   MSGTEST   
0052                TEST_END:      ;From this point, RAM is good for use
0052                             ; 
0052                             ; Safety HALT
0052   76                     HALT      
0053                             ; 
0053                             ; ********************** Subroutines ********************** 
0053                             ;Print test messages in display (assuming the ram is not available for stack)
0053                             ;  HL = defines message text location in ROM
0053                             ;  Character position in display:
0053                             ;  (03H)(02H)(01H)(00H)  (07H)(06H)(05H)(04H)
0053                             ; 
0053                             ; 
0053                MSGTEST:      
0053   08                     EX   AF,AF'   ;Preserves A and F registers
0054   06 09                  LD   B,09   ;Loads BD with max. number of chars + 1 (9)
0056                MSG_BEGIN:      
0056   3E 00                  LD   A,00h   ;Sets A reg as NUL char for searching string end
0058   56                     LD   D,(HL)   ;Retrieves the char from the current memory location
0059   ED A1                  CPI      ;Compare if (HL) position has a null char and Increment HL
005B   28 50                  JR   Z,MSG_END   ;If Z = 1, then A=(HL), so message end
005D   05                     DEC   B   
005E   78                     LD   A,B   ;Loads current char position in the string
005F                MSGD1:       
005F   FE 08                  CP   08   ;1st character printing
0061   20 06                  JR   NZ,MSGD2   
0063   0E 03                  LD   C,03H   
0065   ED 51                  OUT   (C),D   
0067   18 ED                  JR   MSG_BEGIN   
0069                MSGD2:       ;2nd character printing
0069   FE 07                  CP   07   
006B   20 06                  JR   NZ,MSGD3   
006D   0E 02                  LD   C,02H   
006F   ED 51                  OUT   (C),D   
0071   18 E3                  JR   MSG_BEGIN   
0073                MSGD3:       ;3rd character printing
0073   FE 06                  CP   06   
0075   20 06                  JR   NZ,MSGD4   
0077   0E 01                  LD   C,01H   
0079   ED 51                  OUT   (C),D   
007B   18 D9                  JR   MSG_BEGIN   
007D                MSGD4:       ;4rd character printing
007D   FE 05                  CP   05   
007F   20 06                  JR   NZ,MSGD5   
0081   0E 00                  LD   C,00H   
0083   ED 51                  OUT   (C),D   
0085   18 CF                  JR   MSG_BEGIN   
0087                MSGD5:       
0087   FE 04                  CP   04   ;1st character printing
0089   20 06                  JR   NZ,MSGD6   
008B   0E 07                  LD   C,07H   
008D   ED 51                  OUT   (C),D   
008F   18 C5                  JR   MSG_BEGIN   
0091                MSGD6:       ;2nd character printing
0091   FE 03                  CP   03   
0093   20 06                  JR   NZ,MSGD7   
0095   0E 06                  LD   C,06H   
0097   ED 51                  OUT   (C),D   
0099   18 BB                  JR   MSG_BEGIN   
009B                MSGD7:       ;3rd character printing
009B   FE 02                  CP   02   
009D   20 06                  JR   NZ,MSGD8   
009F   0E 05                  LD   C,05H   
00A1   ED 51                  OUT   (C),D   
00A3   18 B1                  JR   MSG_BEGIN   
00A5                MSGD8:       ;4rd character printing
00A5   FE 01                  CP   01   
00A7   20 04                  JR   NZ,MSG_END   
00A9   0E 04                  LD   C,04H   
00AB   ED 51                  OUT   (C),D   
00AD                MSG_END:      
00AD   C9                     RET      
00AE                             ; 
00AE                             ;Print messages in display
00AE                             ;  D = defines value type to print
00AE                             ;       00H = ASCII, lenght = until NUL char is found or len >= 8
00AE                             ;       01H = Hexadecimal
00AE                             ;  Character position in display:
00AE                             ;  (03H)(02H)(01H)(00H)  (07H)(06H)(05H)(04H)
00AE                PRINT:       
00AE   08                     EX   AF,AF'   ;Save current accumulator/flag values
00AF   C5                     PUSH   BC   
00B0   3E 01                  LD   A,01H   
00B2   BA                     CP   D   
00B3   20 06                  JR   NZ,PRN_HEX   
00B5   3D                     DEC   A   
00B6   BA                     CP   D   
00B7   20 04                  JR   NZ,PRN_ASC   
00B9   18 20                  JR   PRN_END   
00BB                PRN_HEX:      
00BB                             ;   TO DO
00BB   18 1E                  JR   PRN_END   
00BD                PRN_ASC:      
00BD   0E 04                  LD   C,04H   
00BF                PLOOP1:      ;Print in first display chunk, I/O = 03h ~ 00H
00BF   7E                     LD   A,(HL)   
00C0   C6 00                  ADD   A,00H   
00C2   28 17                  JR   Z,PRN_END   ;Found NUL char
00C4   0D                     DEC   C   
00C5   ED 79                  OUT   (C),A   
00C7   23                     INC   HL   
00C8   B9                     CP   C   
00C9   20 F4                  JR   NZ,PLOOP1   
00CB   0E 07                  LD   C,07H   
00CD                PLOOP2:      ;Print in second display chunk, I/O = 07h ~ 04H
00CD   7E                     LD   A,(HL)   
00CE   C6 00                  ADD   A,00H   
00D0   28 09                  JR   Z,PRN_END   ;Found NUL char
00D2   0D                     DEC   C   
00D3   ED 79                  OUT   (C),A   
00D5   23                     INC   HL   
00D6   3E 04                  LD   A,04H   
00D8   B9                     CP   C   
00D9   20 F2                  JR   NZ,PLOOP2   
00DB                PRN_END:      
00DB   C1                     POP   BC   
00DC   08                     EX   AF,AF'   
00DD   C9                     RET      
00DE                             ;Delay
00DE                             ;  D = defines value type to print
00DE                             ;       00H = ASCII, lenght = until NUL char is found or len >= 8
00DE                             ;       01H = Hexadecimal
00DE                             ;  Character position in display:
00DE                             ;  (03H)(02H)(01H)(00H)  (07H)(06H)(05H)(04H)
00DE                             ;DELAY:
00DE                             ;    EX AF, AF'      ;Save current accumulator/flag values
00DE                             ;    LD A, FFH
00DE                             ;    LD B, FFH
00DE                             ;DLY1:
00DE                             ;    DJNZ A, DLY2
00DE                             ;    JR DLY_END
00DE                             ;DLY2:
00DE                             ;    DJNZ B, DLY2
00DE                             ;    JR DLY1
00DE                             ;DLY_END:
00DE                             ;    EX AF, AF'
00DE                             ;    RET
00DE                             ; 
00DE                             ; Text messages
00DE                MSG_HELLO:   EQU   $   
00DE   5A 38 30 20 43 4F 4F 4C 00 DB   "Z80 COOL",00h   
00E7                MSG_RAMOK:   EQU   $   
00E7   52 4F 4D 20 4F 4B 20 20 00 DB   "ROM OK  ",00h   
00F0                MSG_RAMBAD:   EQU   $   
00F0   52 4F 4D 20 42 41 44 20 00 DB   "ROM BAD ",00h   


MEMTEST1:           0026 DEFINED AT LINE 37
                    > USED AT LINE 43
MEMTEST2:           0038 DEFINED AT LINE 46
                    > USED AT LINE 42
                    > USED AT LINE 52
RAM_OK:             0044 DEFINED AT LINE 53
                    > USED AT LINE 51
RAM_BAD:            004C DEFINED AT LINE 57
                    > USED AT LINE 41
                    > USED AT LINE 50
TEST_END:           0052 DEFINED AT LINE 60
                    > USED AT LINE 56
MSGTEST:            0053 DEFINED AT LINE 72
                    > USED AT LINE 55
                    > USED AT LINE 59
MSG_BEGIN:          0056 DEFINED AT LINE 75
                    > USED AT LINE 87
                    > USED AT LINE 93
                    > USED AT LINE 99
                    > USED AT LINE 105
                    > USED AT LINE 111
                    > USED AT LINE 117
                    > USED AT LINE 123
MSGD1:              005F DEFINED AT LINE 82
MSGD2:              0069 DEFINED AT LINE 88
                    > USED AT LINE 84
MSGD3:              0073 DEFINED AT LINE 94
                    > USED AT LINE 90
MSGD4:              007D DEFINED AT LINE 100
                    > USED AT LINE 96
MSGD5:              0087 DEFINED AT LINE 106
                    > USED AT LINE 102
MSGD6:              0091 DEFINED AT LINE 112
                    > USED AT LINE 108
MSGD7:              009B DEFINED AT LINE 118
                    > USED AT LINE 114
MSGD8:              00A5 DEFINED AT LINE 124
                    > USED AT LINE 120
MSG_END:            00AD DEFINED AT LINE 129
                    > USED AT LINE 79
                    > USED AT LINE 126
PRINT:              00AE DEFINED AT LINE 138
PRN_HEX:            00BB DEFINED AT LINE 148
                    > USED AT LINE 143
PRN_ASC:            00BD DEFINED AT LINE 151
                    > USED AT LINE 146
PLOOP1:             00BF DEFINED AT LINE 153
                    > USED AT LINE 161
PLOOP2:             00CD DEFINED AT LINE 163
                    > USED AT LINE 172
PRN_END:            00DB DEFINED AT LINE 173
                    > USED AT LINE 147
                    > USED AT LINE 150
                    > USED AT LINE 156
                    > USED AT LINE 166
MSG_HELLO:          00DE DEFINED AT LINE 198
MSG_RAMOK:          00E7 DEFINED AT LINE 200
                    > USED AT LINE 54
MSG_RAMBAD:         00F0 DEFINED AT LINE 202
                    > USED AT LINE 58
