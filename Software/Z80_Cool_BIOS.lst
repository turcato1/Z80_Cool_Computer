# file opened: Z80_Cool_BIOS.asm
  1   0000              ;===========================================================================
  2   0000              ; Thiago Turcato do Rego - 2023
  3   0000              ; Project: Z80 COOL, Z80 computer in breadboard
  4   0000              ; File: BIOS/Monitor program
  5   0000              ;===========================================================================
  6   0000
  7   0000              ; Compilation directives for allocating memory (no bank) and SLD file generation
  8   0000               DEVICE NOSLOT64K
  9   0000               SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
 10   0000
 11   0000              ; Variable definition
 12   0000              RAMBEGIN EQU 0x1000
 13   0000              RAMSIZE EQU 0x1000
 14   0000
 15   0000              ; Beggining of Monitor program
 16   0000                  ORG 0000H
 17   0000              entry_point:
 18   0000
 19   0000              ; ********************** Main Program **********************
 20   0000
 21   0000              ; Program setup & initialization
 22   0000 31 64 20         LD SP, stack_top    ;Set stack pointer to the end of the ram
 23   0003
 24   0003              ; Welcome & alive message
 25   0003 3E 5A            LD A,'Z'
 26   0005 D3 03            OUT (03H), A
 27   0007 3E 38            LD A,'8'
 28   0009 D3 02            OUT (02H), A
 29   000B 3E 30            LD A,'0'
 30   000D D3 01            OUT (01H), A
 31   000F 3E 20            LD A,' '
 32   0011 D3 00            OUT (00H), A
 33   0013
 34   0013 3E 43            LD A,'C'
 35   0015 D3 07            OUT (07H), A
 36   0017 3E 4F            LD A,'O'
 37   0019 D3 06            OUT (06H), A
 38   001B 3E 4F            LD A,'O'
 39   001D D3 05            OUT (05H), A
 40   001F 3E 4C            LD A,'L'
 41   0021 D3 04            OUT (04H), A
 42   0023
 43   0023              ; Test RAM memory (ADDR 1000H ~ 1FFF)
 44   0023              ; MEMORY TEST 1, FILL W/ 55H
 45   0023 21 00 10         LD HL, RAMBEGIN    ;Set the memory pointer to first RAM address
 46   0026 01 00 10         LD BC, RAMSIZE    ;Set the byte counter to memory size value
 47   0029              MEMTEST55:          ;Begin test sequence writing 55H in all memory positions
 48   0029 3E 55            LD A, 55H
 49   002B 77               LD (HL), A      ;Write 55H in (HL) memory position
 50   002C ED A1            CPI             ;Increment HL, Decrement BC and if A=(HL) -> Z = 1
 51   002E 20 1D            JR NZ, RAM_BAD  ;If Z = 0, then A!=(HL), so memory fail
 52   0030 EA 29 00         JP PE, MEMTEST55 ;If BC-1 != 0 -> P = 1 -> Go to test next mem position
 53   0033                                   ;If execution is here CPI reached the memory end, go to next test
 54   0033              ; MEMORY TEST 2, FILL W/ 00H
 55   0033 21 00 10         LD HL, RAMBEGIN    ;Set the memory pointer to first RAM address
 56   0036 01 00 10         LD BC, RAMSIZE    ;Set the byte counter to memory size value
 57   0039              MEMTEST00:          ;Begin test sequence writing 00H in all memory positions
 58   0039 3E 00            LD A, 00H
 59   003B 77               LD (HL), A      ;Write 00H in (HL) memory position
 60   003C ED A1            CPI             ;Increment HL, Decrement BC and if A=(HL) -> Z = 1
 61   003E 20 0D            JR NZ, RAM_BAD  ;If Z = 0, then A!=(HL), so memory fail
 62   0040 EA 39 00         JP PE, MEMTEST00 ;If BC-1 != 0 -> P = 1 -> Go to test next mem position
 63   0043 18 00            JR RAM_OK       ;Go to test next mem position
 64   0045              RAM_OK:             ;Print message "RAM OK"
 65   0045 21 E8 00         LD HL, MSG_RAMOK
 66   0048 CD 54 00         CALL MSGTEST
 67   004B 18 06            JR TEST_END
 68   004D              RAM_BAD:             ;Print message "RAM BAD"
 69   004D 21 F1 00         LD HL, MSG_RAMBAD
 70   0050 CD 54 00         CALL MSGTEST
 71   0053              TEST_END:           ;From this point, RAM is good for use
 72   0053
 73   0053              ; Safety HALT
 74   0053 76               HALT
 75   0054
 76   0054              ; ********************** Subroutines **********************
 77   0054              ;Print test messages in display (assuming the ram is not available for stack)
 78   0054              ;  HL = defines message text location in ROM
 79   0054              ;  Character position in display:
 80   0054              ;  (03H)(02H)(01H)(00H)  (07H)(06H)(05H)(04H)
 81   0054
 82   0054
 83   0054              MSGTEST:
 84   0054 08               EX AF, AF'      ;Preserves A and F registers
 85   0055 06 09            LD B, 09        ;Loads BD with max. number of chars + 1 (9)
 86   0057              MSG_BEGIN:
 87   0057 3E 00            LD A, 00h       ;Sets A reg as NUL char for searching string end
 88   0059 56               LD D, (HL)      ;Retrieves the char from the current memory location
 89   005A ED A1            CPI             ;Compare if (HL) position has a null char and Increment HL
 90   005C 28 50            JR Z, MSG_END   ;If Z = 1, then A=(HL), so message end
 91   005E 05               DEC B
 92   005F 78               LD A, B         ;Loads current char position in the string
 93   0060              MSGD1:
 94   0060 FE 08            CP 08           ;1st character printing
 95   0062 20 06            JR NZ, MSGD2
 96   0064 0E 03            LD C, 03H
 97   0066 ED 51            OUT (C), D
 98   0068 18 ED            JR MSG_BEGIN
 99   006A              MSGD2:              ;2nd character printing
100   006A FE 07            CP 07
101   006C 20 06            JR NZ, MSGD3
102   006E 0E 02            LD C, 02H
103   0070 ED 51            OUT (C), D
104   0072 18 E3            JR MSG_BEGIN
105   0074              MSGD3:              ;3rd character printing
106   0074 FE 06            CP 06
107   0076 20 06            JR NZ, MSGD4
108   0078 0E 01            LD C, 01H
109   007A ED 51            OUT (C), D
110   007C 18 D9            JR MSG_BEGIN
111   007E              MSGD4:              ;4rd character printing
112   007E FE 05            CP 05
113   0080 20 06            JR NZ, MSGD5
114   0082 0E 00            LD C, 00H
115   0084 ED 51            OUT (C), D
116   0086 18 CF            JR MSG_BEGIN
117   0088              MSGD5:
118   0088 FE 04            CP 04           ;1st character printing
119   008A 20 06            JR NZ, MSGD6
120   008C 0E 07            LD C, 07H
121   008E ED 51            OUT (C), D
122   0090 18 C5            JR MSG_BEGIN
123   0092              MSGD6:              ;2nd character printing
124   0092 FE 03            CP 03
125   0094 20 06            JR NZ, MSGD7
126   0096 0E 06            LD C, 06H
127   0098 ED 51            OUT (C), D
128   009A 18 BB            JR MSG_BEGIN
129   009C              MSGD7:              ;3rd character printing
130   009C FE 02            CP 02
131   009E 20 06            JR NZ, MSGD8
132   00A0 0E 05            LD C, 05H
133   00A2 ED 51            OUT (C), D
134   00A4 18 B1            JR MSG_BEGIN
135   00A6              MSGD8:              ;4rd character printing
136   00A6 FE 01            CP 01
137   00A8 20 04            JR NZ, MSG_END
138   00AA 0E 04            LD C, 04H
139   00AC ED 51            OUT (C), D
140   00AE              MSG_END:
141   00AE C9               RET
142   00AF
143   00AF              ;Print messages in display
144   00AF              ;  D = defines value type to print
145   00AF              ;       00H = ASCII, lenght = until NUL char is found or len >= 8
146   00AF              ;       01H = Hexadecimal
147   00AF              ;  Character position in display:
148   00AF              ;  (03H)(02H)(01H)(00H)  (07H)(06H)(05H)(04H)
149   00AF              PRINT:
150   00AF 08               EX AF, AF'      ;Save current accumulator/flag values
151   00B0 C5               PUSH BC
152   00B1 3E 01            LD A, 01H
153   00B3 BA               CP D
154   00B4 20 06            JR NZ, PRN_HEX
155   00B6 3D               DEC A
156   00B7 BA               CP D
157   00B8 20 04            JR NZ, PRN_ASC
158   00BA 18 20            JR PRN_END
159   00BC              PRN_HEX:
160   00BC              ;   TO DO
161   00BC 18 1E            JR PRN_END
162   00BE              PRN_ASC:
163   00BE 0E 04            LD C, 04H
164   00C0              PLOOP1:             ;Print in first display chunk, I/O = 03h ~ 00H
165   00C0 7E               LD A, (HL)
166   00C1 C6 00            ADD A, 00H
167   00C3 28 17            JR Z, PRN_END   ;Found NUL char
168   00C5 0D               DEC C
169   00C6 ED 79            OUT (C), A
170   00C8 23               INC HL
171   00C9 B9               CP C
172   00CA 20 F4            JR NZ, PLOOP1
173   00CC 0E 07            LD C, 07H
174   00CE              PLOOP2:             ;Print in second display chunk, I/O = 07h ~ 04H
175   00CE 7E               LD A, (HL)
176   00CF C6 00            ADD A, 00H
177   00D1 28 09            JR Z, PRN_END   ;Found NUL char
178   00D3 0D               DEC C
179   00D4 ED 79            OUT (C), A
180   00D6 23               INC HL
181   00D7 3E 04            LD A, 04H
182   00D9 B9               CP C
183   00DA 20 F2            JR NZ, PLOOP2
184   00DC              PRN_END:
185   00DC C1               POP BC
186   00DD 08               EX AF, AF'
187   00DE C9               RET
188   00DF              ;Delay
189   00DF              ;  D = defines value type to print
190   00DF              ;       00H = ASCII, lenght = until NUL char is found or len >= 8
191   00DF              ;       01H = Hexadecimal
192   00DF              ;  Character position in display:
193   00DF              ;  (03H)(02H)(01H)(00H)  (07H)(06H)(05H)(04H)
194   00DF              ;DELAY:
195   00DF              ;    EX AF, AF'      ;Save current accumulator/flag values
196   00DF              ;    LD A, FFH
197   00DF              ;    LD B, FFH
198   00DF              ;DLY1:
199   00DF              ;    DJNZ A, DLY2
200   00DF              ;;    JR DLY_END
201   00DF              ;DLY2:
202   00DF              ;    DJNZ B, DLY2
203   00DF              ;    JR DLY1
204   00DF              ;DLY_END:
205   00DF              ;    EX AF, AF'
206   00DF              ;    RET
207   00DF
208   00DF              ; Text messages
209   00DF              MSG_HELLO EQU $
210   00DF 5A 38 30 20      DB "Z80 COOL", 00h
210   00E3 43 4F 4F 4C
210   00E7 00
211   00E8              MSG_RAMOK EQU $
212   00E8 52 4F 4D 20      DB "ROM OK  ", 00h
212   00EC 4F 4B 20 20
212   00F0 00
213   00F1              MSG_RAMBAD EQU $
214   00F1 52 4F 4D 20      DB "ROM BAD ", 00h
214   00F5 42 41 44 20
214   00F9 00
215   00FA
216   00FA              ;Stack pointer definition
217   00FA                  ORG 2000H
218   2000              stack_bottom:   ; 100 bytes of stack
219   2000 00 00 00...          defs    100, 0
220   2064              stack_top:
221   2064
# file closed: Z80_Cool_BIOS.asm
